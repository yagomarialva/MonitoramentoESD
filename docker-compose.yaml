version: '3.8'

services:
  api:
    container_name: fct-backend
    build:
      context: ./backend  # Altera o contexto para a pasta backend
      dockerfile: Dockerfile  # O Dockerfile está na pasta backend
    ports:
      - "7080:8080"  # Mapeia a porta 8080 do container para a 7080 do host
    environment:
      - ASPNETCORE_ENVIRONMENT=Production 
      # Usando o nome do serviço oracle-db para a conexão
      - ConnectionStrings__ora=User Id=system;Password=oracle;Data Source=oracle-db:1521/xe;  
      - TZ=America/Manaus 
    volumes:
      - ./backend/appsettings.json:/app/appsettings.json  # Ajusta o caminho do volume
    networks:
      - your-network
    depends_on:
      - oracle-db
    entrypoint: ["/bin/sh", "-c", "sleep 30 && dotnet BiometricFaceApi.dll"] # Adiciona um atraso de 7 segundos antes de iniciar a API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]  # Verifica o endpoint de saúde da API
      interval: 30s  # Verifica a cada 30 segundos
      timeout: 10s   # Espera 10 segundos para resposta
      retries: 5     # Tenta 5 vezes antes de marcar como unhealthy

  oracle-db:
    image: oracleinanutshell/oracle-xe-11g
    environment:
      ORACLE_PWD: oracle
      TZ: America/Manaus  # Define o fuso horário para o contêiner Oracle
    ports:
      - "49000:1521"  # Porta do Oracle Listener
    networks:
      - your-network
    volumes:
      - oracle-data:/u01/app/oracle  # Persistir os dados do Oracle
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "netstat", "-an", "|", "grep", "1521"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    container_name: fct-frontend
    build:
      context: ./frontend  # Altera o contexto para a pasta frontend
      dockerfile: Dockerfile  # O Dockerfile está na pasta frontend
    ports:
      - "3000:80"  # Mapeia a porta 80 do container para a 3000 do host
    networks:
      - your-network
    depends_on:
      - api  # O frontend depende do backend estar pronto para ser iniciado
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]  # Verifica o endpoint de saúde do frontend
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  your-network:
    driver: bridge

volumes:
  oracle-data:  # Volume para persistência dos dados do Oracle

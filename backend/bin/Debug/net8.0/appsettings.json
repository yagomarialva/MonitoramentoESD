{
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "my": "server=127.0.0.1;user id=sysDb;port=3306;password=IcctServerSw02;database=fct_db",
    "ora": "User Id=system;Password=oracle;Data Source=localhost:49161/xe"
  },
  "jwt": {
    "audience": "http://calcomp-icct.org.br",
    "issuer": "calcomp-icct.org.br",
    "secretKey": "C@lc0mp-IcctC@lc0mp-IcctC@lc0mp-IcctC@lc0mp-IcctC@lc0mp-Icct"
  },
  "security": {
    "key": "AXe8YwuIn1zxt3FPWTZFlAa14EHdPAdN9FaZ9RQWihc=",
    "iv": "bsxnWolsAyO7kCfWuyrnqg=="
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "SqlStructDatabase": [
    {
      "TableName": "Authentication",
      "CommandToCreateTable": "CREATE TABLE authentication (ID INTEGER PRIMARY KEY,Username VARCHAR2(16) NOT NULL,RolesName VARCHAR2(50) NOT NULL,Badge VARCHAR2(255) UNIQUE NOT NULL,Password VARCHAR2(50) NOT NULL,Created DATE,LastUpdated DATE)",
      "CommandToSequence": "CREATE SEQUENCE auth_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER auth_trigger BEFORE INSERT ON authentication FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT auth_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": "BEGIN INSERT INTO Authentication (USERNAME, ROLESNAME, BADGE, PASSWORD,CREATED,LASTUPDATED) VALUES ('admin', 'administrador', 'admincompal', 'inNWbDieA4KNSwWeLzW1cQ==',NULL,NULL);INSERT INTO Authentication (USERNAME, ROLESNAME, BADGE, PASSWORD,CREATED,LASTUPDATED) VALUES ('esp32', 'esp32', 'esp32', 'vijPQ5f4YZ9DsG8dCzNKLw==',NULL,NULL);INSERT INTO Authentication (USERNAME, ROLESNAME, BADGE, PASSWORD,CREATED,LASTUPDATED) VALUES ('ueasupervisor', 'ueasupervisor', 'ueasupervisor', 'ZhwdE79iTgym8N8LY53LVg==',NULL,NULL); END;"

    },
    {
      "TableName": "Users",
      "CommandToCreateTable": "CREATE TABLE users (ID INTEGER PRIMARY KEY,Name VARCHAR2(50) NOT NULL,Badge VARCHAR2(255) UNIQUE NOT NULL,Created DATE NOT NULL,LastUpdated DATE NOT NULL)",
      "CommandToSequence": "CREATE SEQUENCE users_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER users_trigger BEFORE INSERT ON users FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT users_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "Images",
      "CommandToCreateTable": "CREATE TABLE images (ID INTEGER PRIMARY KEY,UserId INTEGER NOT NULL,PictureStream BLOB,Created DATE NOT NULL,LastUpdated DATE NOT NULL,CONSTRAINT fk_users FOREIGN KEY (UserId) REFERENCES users(ID))",
      "CommandToSequence": "CREATE SEQUENCE images_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER images_trigger BEFORE INSERT ON images FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT images_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "Jig",
      "CommandToCreateTable": "CREATE TABLE jig (ID INTEGER PRIMARY KEY,Name VARCHAR2(50) NOT NULL,SerialNumber VARCHAR2(100) NOT NULL,Description VARCHAR2(250),Created DATE NOT NULL,LastUpdated DATE NOT NULL)",
      "CommandToSequence": "CREATE SEQUENCE jig_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER jig_trigger BEFORE INSERT ON jig FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT jig_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "Roles",
      "CommandToCreateTable": "CREATE TABLE roles (ID INTEGER PRIMARY KEY,RolesName VARCHAR2(50) UNIQUE NOT NULL,Created DATE,LastUpdated DATE)",
      "CommandToSequence": "CREATE SEQUENCE roles_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER roles_trigger BEFORE INSERT ON roles FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT roles_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": "BEGIN INSERT INTO Roles (RolesName) VALUES ('administrador'); INSERT INTO Roles (RolesName) VALUES ('desenvolvedor'); INSERT INTO Roles (RolesName) VALUES ('operador'); INSERT INTO Roles (RolesName) VALUES ('tecnico'); INSERT INTO Roles (RolesName) VALUES ('esp32'); INSERT INTO Roles (RolesName) VALUES ('ueasupervisor'); END;"
    },
    {
      "TableName": "Station",
      "CommandToCreateTable": "CREATE TABLE station (ID INTEGER PRIMARY KEY,Name VARCHAR2(50) UNIQUE NOT NULL,SizeX NUMBER(10) NOT NULL,SizeY NUMBER(10) NOT NULL,Created DATE,LastUpdated DATE)",
      "CommandToSequence": "CREATE SEQUENCE station_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER station_trigger BEFORE INSERT ON station FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT station_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "Line",
      "CommandToCreateTable": "CREATE TABLE line (ID INTEGER PRIMARY KEY,Name VARCHAR2(255) UNIQUE NOT NULL,Created DATE NOT NULL,LastUpdated DATE NOT NULL)",
      "CommandToSequence": "CREATE SEQUENCE line_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER line_trigger BEFORE INSERT ON line FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT line_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "MonitorEsd",
      "CommandToCreateTable": "CREATE TABLE monitorEsd (ID NUMBER PRIMARY KEY,SerialNumber VARCHAR2(100) UNIQUE NOT NULL,Description VARCHAR2(250),Created DATE NOT NULL,LastUpdated DATE NOT NULL)",
      "CommandToSequence": "CREATE SEQUENCE monitorEsd_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER monitorEsd_trigger BEFORE INSERT ON monitorEsd FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT monitorEsd_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "LogMonitorEsd",
      "CommandToCreateTable": "CREATE TABLE LogMonitorEsd (ID NUMBER PRIMARY KEY,SerialNumber VARCHAR2(100) NOT NULL, MessageType VARCHAR2(250), MonitorEsdID INTEGER NOT NULL,IP VARCHAR2(250) NOT NULL, Status NUMBER(1) CHECK (Status IN (0, 1)), MessageContent VARCHAR2(250),Description VARCHAR2(250), Created DATE NOT NULL,LastUpdated DATE NOT NULL)",
      "CommandToSequence": "CREATE SEQUENCE logMonitorEsd_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER logMonitorEsd_trigger BEFORE INSERT ON LogMonitorEsd FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT logMonitorEsd_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""

    },
    {
      "TableName": "LinkStationAndLine",
      "CommandToCreateTable": "CREATE TABLE linkStationAndLine (ID INTEGER PRIMARY KEY,OrdersList INTEGER NOT NULL,LineID INTEGER NOT NULL,StationID INTEGER NOT NULL,Created DATE,LastUpdated DATE,CONSTRAINT fk_line FOREIGN KEY (LineID) REFERENCES line(ID),CONSTRAINT fk_station FOREIGN KEY (StationID) REFERENCES station(ID))",
      "CommandToSequence": "CREATE SEQUENCE linkStationAndLine_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER linkStationAndLine_trigger BEFORE INSERT ON linkStationAndLine FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT linkStationAndLine_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "StationView",
      "CommandToCreateTable": "CREATE TABLE stationView (ID INTEGER PRIMARY KEY,MonitorEsdId INTEGER UNIQUE NOT NULL,LinkStationAndLineId INTEGER NOT NULL,PositionSequence INTEGER NOT NULL,Created DATE NOT NULL,LastUpdated DATE NOT NULL,CONSTRAINT fk_linkStationAndLine FOREIGN KEY (LinkStationAndLineId) REFERENCES linkStationAndLine(ID),CONSTRAINT fk_monitor FOREIGN KEY (MonitorEsdId) REFERENCES monitorEsd(ID))",
      "CommandToSequence": "CREATE SEQUENCE stationView_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER stationView_trigger BEFORE INSERT ON stationView FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT stationView_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "ProduceActivity",
      "CommandToCreateTable": "CREATE TABLE produceActivity (ID INTEGER PRIMARY KEY,UserId INTEGER NOT NULL,JigId INTEGER NOT NULL,MonitorEsdId INTEGER NOT NULL,LinkStationAndLineID INTEGER,IsLocked NUMBER(1) CHECK (IsLocked IN (0, 1)),Description VARCHAR2(250),Created DATE NOT NULL,LastUpdated DATE NOT NULL,CONSTRAINT fk_produceActivity_jig FOREIGN KEY (JigId) REFERENCES jig(ID),CONSTRAINT fk_produceActivity_monitor FOREIGN KEY (MonitorEsdId) REFERENCES monitorEsd(ID),CONSTRAINT fk_produceActivity_user FOREIGN KEY (UserId) REFERENCES users(ID),CONSTRAINT fk_produceActivity_linkStLine FOREIGN KEY (LinkStationAndLineID) REFERENCES linkStationAndLine(ID))",
      "CommandToSequence": "CREATE SEQUENCE produceActivity_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER produceActivity_trigger BEFORE INSERT ON produceActivity FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT produceActivity_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    },
    {
      "TableName": "RecordStatusProduce",
      "CommandToCreateTable": "CREATE TABLE recordStatusProduce (ID INTEGER PRIMARY KEY,ProduceActivityID INTEGER NOT NULL,UserId INTEGER NOT NULL,Description VARCHAR2(250),Status NUMBER,DateEvent DATE,CONSTRAINT fk_produceActivity FOREIGN KEY (ProduceActivityID) REFERENCES produceActivity(ID),CONSTRAINT fk_user FOREIGN KEY (UserId) REFERENCES users(ID))",
      "CommandToSequence": "CREATE SEQUENCE recordStatusProduce_seq START WITH 1 INCREMENT BY 1",
      "CommandToTrigger": "CREATE TRIGGER recordStatusProduce_trigger BEFORE INSERT ON recordStatusProduce FOR EACH ROW WHEN (NEW.ID IS NULL) BEGIN SELECT recordStatusProduce_seq.NEXTVAL INTO :NEW.ID FROM dual; END;",
      "CommandToPopulete": ""
    }
  ],

  "Authentication": [
    {
      "Username": "admin",
      "RolesName": "administrador",
      "Badge": "admincompal",
      "Password": "admcompal"
    }
  ],
  "roles": [
    {
      "rolesname": "administrador"
    },
    {
      "rolesname": "desenvolvedor"
    },
    {
      "rolesname": "tecnico"
    },
    {
      "rolesname": "operador"
    },
    {
      "rolesname": "esp32"
    },
    {
      "rolesname": "ueasupervisor"
    }
  ]
}
